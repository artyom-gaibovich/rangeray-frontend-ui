const fs = require('fs');
const path = require('path');

async function restoreFromSnapshot(
  snapshotFile,
  outputDirectory = './restored'
) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å–Ω–∏–º–∫–∞
    if (!fs.existsSync(snapshotFile)) {
      throw new Error(`–§–∞–π–ª —Å–Ω–∏–º–∫–∞ ${snapshotFile} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    }

    // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ —Å–Ω–∏–º–∫–∞
    const snapshotContent = fs.readFileSync(snapshotFile, 'utf8');

    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
    const fileSections = snapshotContent
      .split(/\n\n(?=\/\/)/)
      .filter((section) => section.trim());

    let restoredFiles = 0;
    let restoredDirs = new Set();

    console.log(`–ù–∞–π–¥–µ–Ω–æ —Å–µ–∫—Ü–∏–π —Ñ–∞–π–ª–æ–≤: ${fileSections.length}`);

    for (const section of fileSections) {
      try {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        const firstLineEnd = section.indexOf('\n');
        if (firstLineEnd === -1) continue;

        const filePathLine = section.substring(0, firstLineEnd).trim();
        const content = section.substring(firstLineEnd + 1).trim();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏ –ø—É—Ç–∏
        if (!filePathLine.startsWith('//')) {
          console.log(
            `–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å–µ–∫—Ü–∏—é: ${filePathLine.substring(0, 50)}...`
          );
          continue;
        }

        const relativeFilePath = filePathLine.substring(2); // –£–±–∏—Ä–∞–µ–º '//'

        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –ø—É—Ç–∏
        if (!relativeFilePath) {
          console.log('–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª —Å –ø—É—Å—Ç—ã–º –ø—É—Ç–µ–º');
          continue;
        }

        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        const fullOutputPath = path.join(outputDirectory, relativeFilePath);
        const fileDir = path.dirname(fullOutputPath);

        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        if (!restoredDirs.has(fileDir)) {
          fs.mkdirSync(fileDir, { recursive: true });
          restoredDirs.add(fileDir);
          console.log(`–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${fileDir}`);
        }

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
        fs.writeFileSync(fullOutputPath, content, 'utf8');
        console.log(`–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª: ${relativeFilePath}`);
        restoredFiles++;
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–µ–∫—Ü–∏–∏:`, error.message);
      }
    }

    console.log(`\n‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`);
    console.log(`–°–æ–∑–¥–∞–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: ${restoredDirs.size}`);
    console.log(`–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${restoredFiles}`);
    console.log(`–¶–µ–ª–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${outputDirectory}`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏:', error.message);
  }
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
async function advancedRestore(
  snapshotFile,
  outputDirectory = './restored',
  options = {}
) {
  const {
    overwrite = false, // –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
    verbose = true, // –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
    encoding = 'utf8', // –ö–æ–¥–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤
    skipEmpty = true, // –ü—Ä–æ–ø—É—Å–∫–∞—Ç—å –ø—É—Å—Ç—ã–µ —Ñ–∞–π–ª—ã
  } = options;

  try {
    if (!fs.existsSync(snapshotFile)) {
      throw new Error(`–§–∞–π–ª —Å–Ω–∏–º–∫–∞ ${snapshotFile} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    }

    const snapshotContent = fs.readFileSync(snapshotFile, encoding);
    const fileSections = snapshotContent
      .split(/\n\n+(?=\/\/)/)
      .filter((section) => section.trim());

    let restoredFiles = 0;
    let skippedFiles = 0;
    let restoredDirs = new Set();
    let errors = 0;

    if (verbose) {
      console.log(`üìÅ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑: ${snapshotFile}`);
      console.log(`üéØ –¶–µ–ª–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${outputDirectory}`);
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Å–µ–∫—Ü–∏–π: ${fileSections.length}`);
      console.log('‚îÄ'.repeat(50));
    }

    for (let i = 0; i < fileSections.length; i++) {
      const section = fileSections[i];

      try {
        const lines = section.split('\n');
        const filePathLine = lines[0].trim();

        if (!filePathLine.startsWith('//')) {
          if (verbose) console.log(`‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤ —Å–µ–∫—Ü–∏–∏ ${i + 1}`);
          errors++;
          continue;
        }

        const relativeFilePath = filePathLine.substring(2);
        const content = lines.slice(1).join('\n').trim();

        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (skipEmpty && !content) {
          if (verbose)
            console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫ –ø—É—Å—Ç–æ–≥–æ —Ñ–∞–π–ª–∞: ${relativeFilePath}`);
          skippedFiles++;
          continue;
        }

        const fullOutputPath = path.join(outputDirectory, relativeFilePath);
        const fileDir = path.dirname(fullOutputPath);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if (fs.existsSync(fullOutputPath) && !overwrite) {
          if (verbose)
            console.log(`‚è≠Ô∏è  –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: ${relativeFilePath}`);
          skippedFiles++;
          continue;
        }

        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        if (!restoredDirs.has(fileDir)) {
          fs.mkdirSync(fileDir, { recursive: true });
          restoredDirs.add(fileDir);
          if (verbose) console.log(`üìÇ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${fileDir}`);
        }

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
        fs.writeFileSync(fullOutputPath, content, encoding);
        restoredFiles++;

        if (verbose) {
          console.log(
            `‚úÖ [${i + 1}/${fileSections.length}] ${relativeFilePath}`
          );
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Å–µ–∫—Ü–∏–∏ ${i + 1}:`, error.message);
        errors++;
      }
    }

    // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    console.log('\n' + '‚ïê'.repeat(50));
    console.log('üìä –ò–¢–û–ì–ò –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø:');
    console.log('‚ïê'.repeat(50));
    console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${restoredFiles}`);
    console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${skippedFiles}`);
    console.log(`üìÇ –°–æ–∑–¥–∞–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: ${restoredDirs.size}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errors}`);
    console.log(`üéØ –¶–µ–ª–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${path.resolve(outputDirectory)}`);

    if (errors === 0 && restoredFiles > 0) {
      console.log('\n‚ú® –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    }
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: —Å–Ω–∏–º–æ–∫ + –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
async function createAndRestoreSnapshot(
  sourceDir,
  snapshotFile,
  restoreDir,
  options = {}
) {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: —Å–æ–∑–¥–∞–Ω–∏–µ —Å–Ω–∏–º–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ\n');

  // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Å–Ω–∏–º–æ–∫
  await createSnapshot(sourceDir, snapshotFile, options);
  console.log('\n' + '‚îÄ'.repeat(50));

  // –ó–∞—Ç–µ–º –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
  await advancedRestore(snapshotFile, restoreDir, options);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–Ω–∏–º–∫–∞ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π)
async function createSnapshot(directoryPath, outputFile, options = {}) {
  const { excludeDirs = ['node_modules', '.git'], encoding = 'utf8' } = options;

  try {
    if (!fs.existsSync(directoryPath)) {
      throw new Error(`–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${directoryPath} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    }

    fs.writeFileSync(outputFile, '', encoding);
    let processedFiles = 0;

    async function processDirectory(currentPath, relativePath = '') {
      const items = await fs.promises.readdir(currentPath, {
        withFileTypes: true,
      });

      for (const item of items) {
        const itemPath = path.join(currentPath, item.name);
        const itemRelativePath = path.join(relativePath, item.name);

        if (item.isDirectory()) {
          if (!excludeDirs.includes(item.name)) {
            await processDirectory(itemPath, itemRelativePath);
          }
        } else if (item.isFile()) {
          try {
            const content = await fs.promises.readFile(itemPath, encoding);
            const entry = `//${itemRelativePath}\n${content}\n\n`;

            await fs.promises.appendFile(outputFile, entry, encoding);
            console.log(`üìÅ –î–æ–±–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: ${itemRelativePath}`);
            processedFiles++;
          } catch (error) {
            console.error(
              `–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${itemRelativePath}:`,
              error.message
            );
          }
        }
      }
    }

    await processDirectory(directoryPath);
    console.log(`\nüìã –°–Ω–∏–º–æ–∫ —Å–æ–∑–¥–∞–Ω: ${outputFile} (${processedFiles} —Ñ–∞–π–ª–æ–≤)`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–Ω–∏–º–∫–∞:', error.message);
  }
}

const snapshotFile = process.argv[2] || './snapshot.txt';
const restoreDirectory = process.argv[3] || './restored';

createSnapshot('./app/projects', 'snapshot.txt');
